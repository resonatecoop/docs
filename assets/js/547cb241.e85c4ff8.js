"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[32],{3905:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>d});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var c=r.createContext({}),p=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},l=function(t){var e=p(t.components);return r.createElement(c.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,c=t.parentName,l=i(t,["components","mdxType","originalType","parentName"]),m=p(n),d=o,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(f,s(s({ref:e},l),{},{components:n})):r.createElement(f,s({ref:e},l))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i.mdxType="string"==typeof t?t:o,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3661:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:2,title:"Example API Calls"},s=void 0,i={unversionedId:"example-api-calls",id:"example-api-calls",title:"Example API Calls",description:"Explore sample client API calls, illustrated by the beam repository's Api.ts file...",source:"@site/docs/example-api-calls.md",sourceDirName:".",slug:"/example-api-calls",permalink:"/docs/example-api-calls",draft:!1,editUrl:"https://github.com/resonatecoop/beam/edit/main/src/services/Api.ts",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Example API Calls"},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/overview"},next:{title:"Active Development",permalink:"/docs/category/active-development"}},c={},p=[],l={toc:p};function u(t){let{components:e,...n}=t;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Explore sample client API calls, illustrated by the ",(0,o.kt)("code",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/resonatecoop/beam"},"beam"))," repository's ",(0,o.kt)("code",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/resonatecoop/beam/blob/main/src/services/Api.ts"},"Api.ts"))," file..."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { apiRoot, resonateUrl } from "../constants";\n\nexport const API = `${resonateUrl}${apiRoot}/`;\nexport const oidcStorage = `oidc.user:${process.env.REACT_APP_AUTHORITY}:${process.env.REACT_APP_CLIENT_ID}`;\n\nclass NotFoundError extends Error {\n  constructor(params: any) {\n    super(params);\n    Object.setPrototypeOf(this, NotFoundError.prototype);\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, NotFoundError);\n    }\n\n    this.message = "Not Found";\n  }\n}\n\nexport const getToken = () => {\n  let token: string | undefined = undefined;\n  try {\n    const stateString = localStorage.getItem("state");\n    const state = JSON.parse(stateString ?? "");\n    token = state?.token;\n  } catch (e) {}\n\n  try {\n    const oauthStateString = localStorage.getItem(oidcStorage);\n    const oauthState = JSON.parse(oauthStateString ?? "");\n    token = oauthState.access_token;\n  } catch (e) {}\n  return { token: token };\n};\n\nexport const errorHandler = async (result: Response) => {\n  if (!result.ok) {\n    if (result.status === 404) {\n      throw new NotFoundError(result);\n    }\n    if (result.status === 400) {\n      const error = await result.json();\n      console.error(error.status, error.message, error);\n      if (error.errors) {\n        throw new Error("There was a problem communicating with the API");\n      }\n    }\n    if (result.status === 500) {\n      throw new Error("There was a problem communicating with the API");\n    }\n  }\n};\n\nexport const fetchWrapper = async (\n  url: string,\n  options: RequestInit,\n  apiOptions?: APIOptions,\n  pagination?: boolean\n) => {\n  const { token } = getToken();\n  let fullUrl = `${API}${url}`;\n  if (apiOptions && options.method === "GET") {\n    const params = new URLSearchParams();\n    Object.keys(apiOptions).forEach((key) => {\n      params.set(key, `${apiOptions[key]}`);\n    });\n    fullUrl += `?${params}`;\n  }\n\n  return fetch(fullUrl, {\n    headers: {\n      "Content-Type":\n        apiOptions?.format && typeof apiOptions?.format === "string"\n          ? apiOptions.format\n          : "application/json",\n      ...(token ? { Authorization: `Bearer ${token}` } : {}),\n    },\n    ...options,\n  })\n    .then(async (result) => {\n      await errorHandler(result);\n      if (apiOptions?.format !== "application/csv") {\n        return result.json();\n      }\n      return result.blob();\n    })\n    .then((result) => {\n      if (pagination) {\n        return result;\n      }\n      return result.data;\n    });\n};\n\n/**\n * Playlists\n */\n\nexport interface FetchTrackGroupFilter extends APIOptions {\n  type?: TrackgroupType;\n}\n\nexport const fetchPlaylists = async (\n  options?: FetchTrackGroupFilter\n): Promise<APIPaginatedResult<Trackgroup>> => {\n  return fetchWrapper(\n    "playlists",\n    {\n      method: "GET",\n    },\n    options,\n    true\n  );\n};\n\nexport const fetchPlaylist = async (id: string): Promise<TrackgroupDetail> => {\n  return fetchWrapper(`playlists/${id}`, {\n    method: "GET",\n  });\n};\n\n/**\n * Track groups\n */\n\nexport const fetchTrackGroups = async (\n  options?: FetchTrackGroupFilter\n): Promise<APIPaginatedResult<Trackgroup>> => {\n  return fetchWrapper(\n    "trackgroups",\n    {\n      method: "GET",\n    },\n    options,\n    true\n  );\n};\n\nexport const fetchTrackGroup = async (\n  id: string\n): Promise<TrackgroupDetail> => {\n  return fetchWrapper(`trackgroups/${id}`, {\n    method: "GET",\n  });\n};\n\ninterface TagOptions extends APIOptions {\n  tag: string;\n}\n\nexport const fetchByTag = async ({\n  tag,\n  ...options\n}: TagOptions): Promise<{\n  data: { trackgroups: Trackgroup[]; tracks: Track[] };\n}> => {\n  return fetchWrapper(\n    `tag/${tag}`,\n    {\n      method: "GET",\n    },\n    options,\n    true\n  );\n};\n/**\n *  Label endpoints\n */\n\nexport const fetchLabels = (\n  options?: APIOptions\n): Promise<APIPaginatedResult<Label>> => {\n  return fetchWrapper(`labels`, { method: "GET" }, options, true);\n};\n\nexport const fetchLabel = (labelId: string): Promise<Label> => {\n  return fetchWrapper(`labels/${labelId}`, {\n    method: "GET",\n  });\n};\n\nexport const fetchLabelReleases = (labelId: string): Promise<Release[]> => {\n  return fetchWrapper(`labels/${labelId}/releases`, {\n    method: "GET",\n  });\n};\n\nexport const fetchLabelArtists = (labelId: string): Promise<LabelArtist[]> => {\n  return fetchWrapper(`labels/${labelId}/artists`, {\n    method: "GET",\n  });\n};\n\n/**\n * Artist endpoints\n */\n\nexport const fetchArtists = (\n  options?: APIOptions\n): Promise<APIPaginatedResult<Artist>> => {\n  return fetchWrapper(\n    `artists`,\n    {\n      method: "GET",\n    },\n    options,\n    true\n  );\n};\n\nexport const fetchArtist = (artistId: string): Promise<Artist> => {\n  return fetchWrapper(`artists/${artistId}`, {\n    method: "GET",\n  });\n};\n\nexport const fetchArtistReleases = (artistId: string): Promise<Release[]> => {\n  return fetchWrapper(`artists/${artistId}/releases`, {\n    method: "GET",\n  });\n};\n\nexport const fetchArtistTopTracks = (artistId: string): Promise<Track[]> => {\n  return fetchWrapper(`artists/${artistId}/tracks/top`, {\n    method: "GET",\n  });\n};\n\n/**\n * Track endpoints\n */\n\nexport const fetchTracks = (\n  options: APIOptions\n): Promise<APIPaginatedResult<Track>> => {\n  return fetchWrapper(\n    `tracks`,\n    {\n      method: "GET",\n    },\n    options,\n    true\n  ).then((results) => {\n    return { ...results, data: results.data.map((r: Track) => ({ ...r })) };\n  });\n};\n\nexport const fetchTrack = (trackId: string): Promise<Track> => {\n  return fetchWrapper(`tracks/${trackId}`, {\n    method: "GET",\n  });\n};\n\n/**\n *  Search endpoints\n */\n\nexport const fetchSearchResults = (\n  searchString: string\n): Promise<{\n  artists: Artist[];\n  trackgroups: Trackgroup[];\n  tracks: Track[];\n  labels: Label[];\n  bands: Artist[];\n}> => {\n  return fetchWrapper(\n    "search/",\n    { method: "GET" },\n    // NOTE: API is looking for actual "+" (%2B) values instead of whitespace (%20)\n    { q: searchString.replace(/ /g, "+") }\n  );\n};\n\n')))}u.isMDXComponent=!0}}]);